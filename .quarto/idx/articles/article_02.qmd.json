{"title":"Chapter 5 Everything Analysis","markdown":{"yaml":{"title":"Chapter 5 Everything Analysis"},"headingText":"Introduction to Problem","containsRefs":false,"markdown":"\n\nIn this problem we are going to need to make 2 functions one using and loop and one using the sum function.\n\n## Problem\nAnalogous to the some method, arrays also have an every method. This one returns true when the given function returns true for every element in the array. In a way, some is a version of the || operator that acts on arrays, and every is like the && operator.\n\nImplement every as a function that takes an array and a predicate function as parameters. Write two versions, one using a loop and one using the some method.\n\n## Explaining the code\n```js\nfunction every(array, predicate) {\n```\n\nWe are going to start the code by creating a function that I named every. The function is going to take two parameters array and predicate. Array is just an array and predicate is going to be a function.\n\n```js\n    for (let element of array) {\n```\n\nIn this line, we are going to start a for loop that is going to iterate over each of the elements in array.\n\n```js\n      if (!predicate(element)) return false;\n```\n\nInside of the for loop we are going to use the if statement. It is going to check if the result of calling the predicate function with the current element as the one we are using is false. If false it means the condition assigned by the predicate function does not happen.  So therefore it is going to return back false.\n\n```js\n    }\n    return true;\n  }\n  ```\n\nNow if the loop completes without coming across a false from the prdeicate function it means that it has been met for all elements. If this happens than the return true returns it as true.\n\n  ```js\n  function every2(array, predicate) {\n```\n\nNow we are going to make another function called every2 that is going to take two parameters array and predicate once again.\n\n```js\n    return !array.some(element => !predicate(element));\n  }\n```\n\nHere we are going to use some on array this time. Some checks to see if at least one element in the array satisfies the condition provided by the function. With this function we check to see the result of calling predicate with the current element is true. We use ! to see if all elements satisfy the conditon that is going to be set by predicate. It returns true if all elements are satisfied and false otherwise.\n\n## Examples\n\nThese are examples from the book that are used to test our functions.\n\n```js\n  console.log(every([1, 3, 5], n => n < 10));\n```\n\nHere we are going to use the every function and fill the array with 1, 3, and 5. And the predicate function is going to be what is says. Predicate is checking to see is n is less than 10, in this case they all are and the console will print as true.\n\n```js\n  console.log(every([2, 4, 16], n => n < 10));\n```\n\nIn this example we call the every function with 2, 4, and 16 and the same predicate function this time it returns false becasuse 16 is not less than 10.\n\n```js\n  console.log(every([], n => n < 10));\n```\n\nIn this last example we run the empty function with an empty array and a new function for predicate. Since there is nothing in the array it immediately returns true.\n\n## Full code\nA complete solution to the problem may be found [here](/js/everything.js), or the reader may view it below:\n\n```{.javascript filename=\"everything.js\"}\nfunction every(array, predicate) {\n    for (let element of array) {\n      if (!predicate(element)) return false;\n    }\n    return true;\n  }\n  \n  function every2(array, predicate) {\n    return !array.some(element => !predicate(element));\n  }\n  \n  console.log(every([1, 3, 5], n => n < 10));\n  console.log(every([2, 4, 16], n => n < 10));\n  console.log(every([], n => n < 10));\n```","srcMarkdownNoYaml":"\n\n## Introduction to Problem\nIn this problem we are going to need to make 2 functions one using and loop and one using the sum function.\n\n## Problem\nAnalogous to the some method, arrays also have an every method. This one returns true when the given function returns true for every element in the array. In a way, some is a version of the || operator that acts on arrays, and every is like the && operator.\n\nImplement every as a function that takes an array and a predicate function as parameters. Write two versions, one using a loop and one using the some method.\n\n## Explaining the code\n```js\nfunction every(array, predicate) {\n```\n\nWe are going to start the code by creating a function that I named every. The function is going to take two parameters array and predicate. Array is just an array and predicate is going to be a function.\n\n```js\n    for (let element of array) {\n```\n\nIn this line, we are going to start a for loop that is going to iterate over each of the elements in array.\n\n```js\n      if (!predicate(element)) return false;\n```\n\nInside of the for loop we are going to use the if statement. It is going to check if the result of calling the predicate function with the current element as the one we are using is false. If false it means the condition assigned by the predicate function does not happen.  So therefore it is going to return back false.\n\n```js\n    }\n    return true;\n  }\n  ```\n\nNow if the loop completes without coming across a false from the prdeicate function it means that it has been met for all elements. If this happens than the return true returns it as true.\n\n  ```js\n  function every2(array, predicate) {\n```\n\nNow we are going to make another function called every2 that is going to take two parameters array and predicate once again.\n\n```js\n    return !array.some(element => !predicate(element));\n  }\n```\n\nHere we are going to use some on array this time. Some checks to see if at least one element in the array satisfies the condition provided by the function. With this function we check to see the result of calling predicate with the current element is true. We use ! to see if all elements satisfy the conditon that is going to be set by predicate. It returns true if all elements are satisfied and false otherwise.\n\n## Examples\n\nThese are examples from the book that are used to test our functions.\n\n```js\n  console.log(every([1, 3, 5], n => n < 10));\n```\n\nHere we are going to use the every function and fill the array with 1, 3, and 5. And the predicate function is going to be what is says. Predicate is checking to see is n is less than 10, in this case they all are and the console will print as true.\n\n```js\n  console.log(every([2, 4, 16], n => n < 10));\n```\n\nIn this example we call the every function with 2, 4, and 16 and the same predicate function this time it returns false becasuse 16 is not less than 10.\n\n```js\n  console.log(every([], n => n < 10));\n```\n\nIn this last example we run the empty function with an empty array and a new function for predicate. Since there is nothing in the array it immediately returns true.\n\n## Full code\nA complete solution to the problem may be found [here](/js/everything.js), or the reader may view it below:\n\n```{.javascript filename=\"everything.js\"}\nfunction every(array, predicate) {\n    for (let element of array) {\n      if (!predicate(element)) return false;\n    }\n    return true;\n  }\n  \n  function every2(array, predicate) {\n    return !array.some(element => !predicate(element));\n  }\n  \n  console.log(every([1, 3, 5], n => n < 10));\n  console.log(every([2, 4, 16], n => n < 10));\n  console.log(every([], n => n < 10));\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"article_02.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"flatly","title":"Chapter 5 Everything Analysis"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}